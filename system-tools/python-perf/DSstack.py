# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

#
# 制作特殊状态的火焰图: 所有D状态, 所有S状态.
# perf record -g -e sched:sched_switch -e sched:sched_wakeup -e sched:sched_wakeup_new
# perf script -s DSstack.py -- [-D] [-S] [-w]
#   -D: 因为D状态而被切换的.
#   -S: 因为睡眠而被切换的.
#   -w: wakeup 栈
#

from __future__ import print_function
import os
import sys
import getopt

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
    '/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *


Dstate = False
Sstate = False
Wakeup = False

try:
    options,args = getopt.getopt(sys.argv[1:], "DSw", ["D", "S", "wakeup"])
except getopt.GetoptError:
    sys.exit()
for name,value in options:
    if name in ("-D", "--D"):
        Dstate = True
    elif name in ("-S", "--S"):
        Sstate = True
    elif name in ("-w", "--wakeup"):
        Wakeup = True

STACK={}

def trace_begin():
    a=1

def trace_end():
    a=1


#java 281481 [025] 332226.679048:       sched:sched_switch: java:281481 [120] S ==> swapper/25:0 [120]
def sched__sched_switch(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, prev_comm, prev_pid, prev_prio, prev_state, 
    next_comm, next_pid, next_prio, perf_sample_dict):
        state = flag_str("sched__sched_switch", "prev_state", prev_state)
        if state == "D":
            if not Dstate:
                return
        elif state == "S":
            if not Sstate:
                return
        else:
            return
        if Wakeup:
            STACK[prev_pid] = common_secs*1000000000 + common_nsecs
        print_header(common_comm, common_pid, common_cpu, common_secs, common_nsecs,
            event_name)

        print("%-4s:%d [%d] %s ==> %-4s:%d [%d]" % \
        (prev_comm.split("\000")[0], prev_pid, prev_prio, 
        flag_str("sched__sched_switch", "prev_state", prev_state), 
        next_comm.split("\000")[0], next_pid, next_prio))

        for node in common_callchain:
            if 'sym' in node and 'dso' in node:
                print("\t%16x %s (%s)" % (node['ip'], node['sym']['name'].split("\000")[0], node['dso'].split("\000")[0]))
            elif 'sym' in node:
                print("\t%16x %s ([unknown])" % (node['ip'], node['sym']['name'].split("\000")[0]))
            else:
                print("\t%16x ([unknown]) ([unknown])" % (node['ip']))

        print()

def sched__sched_wakeup_new(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, comm, pid, prio, success, 
    target_cpu, perf_sample_dict):
        a=1

#swapper     0 [007] 332226.681878:       sched:sched_wakeup: java:269783 [120] success=1 CPU:007
def sched__sched_wakeup(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, comm, pid, prio, success, 
    target_cpu, perf_sample_dict):
        if not Wakeup:
            return
        if pid not in STACK:
            return
        del STACK[pid]
        print_header(common_comm, common_pid, common_cpu, common_secs, common_nsecs,
            event_name)

        print("%s:%d [%d] success=%d, CPU:%03d" % \
        (comm.split("\000")[0], pid, prio, success, 
        target_cpu))

        for node in common_callchain:
            if 'sym' in node and 'dso' in node:
                print("\t%16x %s (%s)" % (node['ip'], node['sym']['name'].split("\000")[0], node['dso'].split("\000")[0]))
            elif 'sym' in node:
                print("\t%16x %s ([unknown])" % (node['ip'], node['sym']['name'].split("\000")[0]))
            else:
                print("\t%16x ([unknown]) ([unknown])" % (node['ip']))

        print()

def trace_unhandled(event_name, context, event_fields_dict, perf_sample_dict):
        #print(get_dict_as_string(event_fields_dict))
        #print('Sample: {'+get_dict_as_string(perf_sample_dict['sample'], ', ')+'}')
        a = 1

def print_header(comm, pid, cpu, secs, nsecs, event_name):
    print("%-10s %8u [%03u] %05u.%06u: %20s: " % \
    (comm, pid, cpu, secs, nsecs/1000, event_name), end="")

def get_dict_as_string(a_dict, delimiter=' '):
    return delimiter.join(['%s=%s'%(k,str(v))for k,v in sorted(a_dict.items())])
